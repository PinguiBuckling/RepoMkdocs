{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Restaurant Programacion Orientada a Objetos 1351 Profesor: Josue Casta\u00f1eda Landa Proyecto final Integrantes: 1.- Barron Manzano Jonathan Emanuel 318329419 2.- Flores G\u00f3mez Javier Alberto 423122215 3.- Valdes Vera Maximiliano 423109232","title":"Home"},{"location":"#restaurant","text":"","title":"Restaurant"},{"location":"#programacion-orientada-a-objetos-1351","text":"","title":"Programacion Orientada a Objetos 1351"},{"location":"#profesor-josue-castaneda-landa","text":"","title":"Profesor: Josue Casta\u00f1eda Landa"},{"location":"#proyecto-final","text":"","title":"Proyecto final "},{"location":"#integrantes","text":"1.- Barron Manzano Jonathan Emanuel 318329419 2.- Flores G\u00f3mez Javier Alberto 423122215 3.- Valdes Vera Maximiliano 423109232","title":"Integrantes:"},{"location":"Admin_Guide/","text":"Admin_Guide -Simulacion de la terminal- Bienvenido \u00bfDesea iniciar sesi\u00f3n o registrarse? Ingrese 1 si desea iniciar sesi\u00f3n. Ingrese 2 si desea registrase. Ingrese 3 si desea salir: -Seleccionando la opci\u00f3n 2: Ingrese la opcion 2 si desea registrarse. Se nos deplegar\u00e1 el siguiente men\u00fa: Ingrese el n\u00famero de lo que quiere hacer: 1) Nuevo administrador 2) Salir Para esta gu\u00eda, seleccionaremos la opci\u00f3n 1: \"Nuevo Administrador\" La cual nos desplegar\u00e1 el siguiente formulario el cual llenaremos con los siguientes datos ejemplo: AdminArmando32, Armando Casas, ArmandoArmandoCasas123, Av Siempre Viva 742, 5554530739 NOTA: \"Estos se guardar\u00e1 en un archivo llamado Administradores.csv\" Ingrese el usuario del administrador (ingrese 3 para cancelar la operaci\u00f3n): Ingrese el nombre del administrador: Ingrese la contrase\u00f1a del administrador: Ingrese la direcci\u00f3n del administrador: Ingrese tel\u00e9fono del administrador: Seguido, se se nos desplegar\u00e1 la informacion previamente ingresada de la siguiente forma: AdminArmando32 Armando Casas ArmandoArmandoCasas123 Av Siempre Viva 742 5554530739 Si hay alg\u00fan dato erroneo, favor de ingresar 1, si todos los datos son correctos ingresar 2: Seleccionando la opci\u00f3n 2, asumiento que \"todos los datos son correctos\" Posterior a eso, se nos despliega el siguiente men\u00fa de Administrador: \u00bfQu\u00e9 desea hacer hoy? Ingrese alguna de las siguientes opciones: 1) Ver los ingredientes. 2) Comprar ingredientes. 3) Salir. Seleccionando la opci\u00f3n 1: Ver los ingredientes Se despliega el siguiente Dataframe con todos los ingredientes en el inventario. NOTA: Las columnas _4 y _5 representan los precios de compra y venta de su respectivo articulo Ingredientes: ID Nombre Categoria Cantidad _4 _5 1 Carne molida Proteina 50.8 45 150 2 Pan de hamburguesa Pan 19.95 5 80 3 Cebolla Verdura 10.0 3 60 4 Queso Lacteo 14.95 10 160 5 Queso cheddar Lacteo 15.0 15 200 6 Cebolla caramelizada Condimento 10.0 5 80 7 Salsa BBQ Salsa 15.0 10 100 8 Portobello asado Seta 10.0 10 140 9 Pan integral Pan 20.0 5 100 10 Queso feta Lacteo 10.0 20 500 11 Filete de pescado Proteina 15.0 30 120 12 Pechuga de pollo Proteina 30.0 30 120 13 Refresco Bebida 149.5 25 15 Ingrese alguna de las siguientes opciones: 1) Ver los ingredientes. 2) Comprar ingredientes. 3) Salir. Seleccionando la opcion 2 \"Comprar ingredientes\" Para este ejemplo, usaremos como referencia el ID 1 , el cual representa \"Carne Molida\" y ser\u00e1 el unico ingrediente el cual compraremos. Ingrese el numero del ingrediente a comprar (Ingrese 0 para cancelar): Ingrese la cantidad en kg a comprar: 1 Ingrese 1 si desea comprar otra cosa, sino ingrese 2: 2 Al seleccionar la opci\u00f3n 2, nos devolver\u00e1 al men\u00fa de ingredientes inicial, donde podremos volver a elegir en ver nuestro inventario Actualizado (con lo previamente comprado) de ingredientes o comprar m\u00e1s: Ingrese alguna de las siguientes opciones: 1) Ver los ingredientes. 2) Comprar ingredientes. 3) Salir. Para demostrar que la lista de ingredientes se ha atualizado con la nueva compra de 1kg de Carne Molida que compramos, seleccionaremos la opcion 2: \"Ver los ingredientes.\" Ingredientes: ID Nombre Categoria Cantidad _4 _5 1 Carne molida Proteina 51.8 45 150 2 Pan de hamburguesa Pan 19.95 5 80 3 Cebolla Verdura 10.0 3 60 4 Queso Lacteo 14.95 10 160 5 Queso cheddar Lacteo 15.0 15 200 6 Cebolla caramelizada Condimento 10.0 5 80 7 Salsa BBQ Salsa 15.0 10 100 8 Portobello asado Seta 10.0 10 140 9 Pan integral Pan 20.0 5 100 10 Queso feta Lacteo 10.0 20 500 11 Filete de pescado Proteina 15.0 30 120 12 Pechuga de pollo Proteina 30.0 30 120 13 Refresco Bebida 149.5 25 15 Ingrese alguna de las siguientes opciones: 1) Ver los ingredientes. 2) Comprar ingredientes. 3) Salir. Seleccionando la opci\u00f3n 3: \"Salir\" Hasta Luego .","title":"AdminGuide"},{"location":"Admin_Guide/#admin_guide","text":"-Simulacion de la terminal- Bienvenido \u00bfDesea iniciar sesi\u00f3n o registrarse? Ingrese 1 si desea iniciar sesi\u00f3n. Ingrese 2 si desea registrase. Ingrese 3 si desea salir: -Seleccionando la opci\u00f3n 2: Ingrese la opcion 2 si desea registrarse. Se nos deplegar\u00e1 el siguiente men\u00fa: Ingrese el n\u00famero de lo que quiere hacer: 1) Nuevo administrador 2) Salir Para esta gu\u00eda, seleccionaremos la opci\u00f3n 1: \"Nuevo Administrador\" La cual nos desplegar\u00e1 el siguiente formulario el cual llenaremos con los siguientes datos ejemplo: AdminArmando32, Armando Casas, ArmandoArmandoCasas123, Av Siempre Viva 742, 5554530739 NOTA: \"Estos se guardar\u00e1 en un archivo llamado Administradores.csv\" Ingrese el usuario del administrador (ingrese 3 para cancelar la operaci\u00f3n): Ingrese el nombre del administrador: Ingrese la contrase\u00f1a del administrador: Ingrese la direcci\u00f3n del administrador: Ingrese tel\u00e9fono del administrador: Seguido, se se nos desplegar\u00e1 la informacion previamente ingresada de la siguiente forma: AdminArmando32 Armando Casas ArmandoArmandoCasas123 Av Siempre Viva 742 5554530739 Si hay alg\u00fan dato erroneo, favor de ingresar 1, si todos los datos son correctos ingresar 2: Seleccionando la opci\u00f3n 2, asumiento que \"todos los datos son correctos\" Posterior a eso, se nos despliega el siguiente men\u00fa de Administrador: \u00bfQu\u00e9 desea hacer hoy? Ingrese alguna de las siguientes opciones: 1) Ver los ingredientes. 2) Comprar ingredientes. 3) Salir. Seleccionando la opci\u00f3n 1: Ver los ingredientes Se despliega el siguiente Dataframe con todos los ingredientes en el inventario. NOTA: Las columnas _4 y _5 representan los precios de compra y venta de su respectivo articulo Ingredientes: ID Nombre Categoria Cantidad _4 _5 1 Carne molida Proteina 50.8 45 150 2 Pan de hamburguesa Pan 19.95 5 80 3 Cebolla Verdura 10.0 3 60 4 Queso Lacteo 14.95 10 160 5 Queso cheddar Lacteo 15.0 15 200 6 Cebolla caramelizada Condimento 10.0 5 80 7 Salsa BBQ Salsa 15.0 10 100 8 Portobello asado Seta 10.0 10 140 9 Pan integral Pan 20.0 5 100 10 Queso feta Lacteo 10.0 20 500 11 Filete de pescado Proteina 15.0 30 120 12 Pechuga de pollo Proteina 30.0 30 120 13 Refresco Bebida 149.5 25 15 Ingrese alguna de las siguientes opciones: 1) Ver los ingredientes. 2) Comprar ingredientes. 3) Salir. Seleccionando la opcion 2 \"Comprar ingredientes\" Para este ejemplo, usaremos como referencia el ID 1 , el cual representa \"Carne Molida\" y ser\u00e1 el unico ingrediente el cual compraremos. Ingrese el numero del ingrediente a comprar (Ingrese 0 para cancelar): Ingrese la cantidad en kg a comprar: 1 Ingrese 1 si desea comprar otra cosa, sino ingrese 2: 2 Al seleccionar la opci\u00f3n 2, nos devolver\u00e1 al men\u00fa de ingredientes inicial, donde podremos volver a elegir en ver nuestro inventario Actualizado (con lo previamente comprado) de ingredientes o comprar m\u00e1s: Ingrese alguna de las siguientes opciones: 1) Ver los ingredientes. 2) Comprar ingredientes. 3) Salir. Para demostrar que la lista de ingredientes se ha atualizado con la nueva compra de 1kg de Carne Molida que compramos, seleccionaremos la opcion 2: \"Ver los ingredientes.\" Ingredientes: ID Nombre Categoria Cantidad _4 _5 1 Carne molida Proteina 51.8 45 150 2 Pan de hamburguesa Pan 19.95 5 80 3 Cebolla Verdura 10.0 3 60 4 Queso Lacteo 14.95 10 160 5 Queso cheddar Lacteo 15.0 15 200 6 Cebolla caramelizada Condimento 10.0 5 80 7 Salsa BBQ Salsa 15.0 10 100 8 Portobello asado Seta 10.0 10 140 9 Pan integral Pan 20.0 5 100 10 Queso feta Lacteo 10.0 20 500 11 Filete de pescado Proteina 15.0 30 120 12 Pechuga de pollo Proteina 30.0 30 120 13 Refresco Bebida 149.5 25 15 Ingrese alguna de las siguientes opciones: 1) Ver los ingredientes. 2) Comprar ingredientes. 3) Salir. Seleccionando la opci\u00f3n 3: \"Salir\" Hasta Luego .","title":"Admin_Guide"},{"location":"Admin_Pedidos/","text":"Clase Administrador de pedidos from Pedido import Pedido import pandas as pd class AdministradorPedidos: _pedidos_df = pd.DataFrame def __init__(self) -> None: pass @property def pedidos_df(self): return self._pedidos_df def crear_df(self) -> bool: self.pedidos_df = pd.read_csv(\"archives//Pedidos.csv\") def mostrar_pedidos(self): self.pedidos_df.head(len(self.pedidos_df))","title":"Clase Administrador de pedidos"},{"location":"Admin_Pedidos/#clase-administrador-de-pedidos","text":"from Pedido import Pedido import pandas as pd class AdministradorPedidos: _pedidos_df = pd.DataFrame def __init__(self) -> None: pass @property def pedidos_df(self): return self._pedidos_df def crear_df(self) -> bool: self.pedidos_df = pd.read_csv(\"archives//Pedidos.csv\") def mostrar_pedidos(self): self.pedidos_df.head(len(self.pedidos_df))","title":"Clase Administrador de pedidos"},{"location":"Admin_Personas/","text":"Clase Administrador de Personas from InterfazPersona import IntPersona from Persona import Persona from PersonaAdmin import PersonaAdmin from PersonaCliente import PersonaCliente import pandas as pd class AdministradorPersonas: def __init__(self) -> None: pass _df_admin = pd.DataFrame _df_cliente = pd.DataFrame def mostrar_administradores(self): self._df_admin = pd.read_csv(\"development//clases_codigos//archives//Administradores.csv\") self._df_admin.head(len(self._df_admin)) def mostrar_clientes(self): self._df_cliente = pd.read_csv(\"development//clases_codigos//archives//Clientes.csv\") self._df_cliente.head(len(self._df_cliente)) def inicio_sesion_admin(self) -> None: while(True): print(\"Ingrese sus datos de inicio de sesi\u00f3n: (ingrese 3 para cerrar el programa)\") user_attempt = str(input(\"Usuario: \")) pass_attempt = str(input(\"Contrase\u00f1a: \")) if user_attempt == \"3\" : return False for i in range(len(self._df_admin)): if self._df_admin.iloc[i][1] == user_attempt : if self._df_admin.iloc[i][2] == pass_attempt : aux = True break else : aux = False break if aux == True : break if aux == False : print(\"Error a la hora de ingresar el usuario o contrase\u00f1a\") return True def inicio_sesion_cliente(self) -> None: while(True): print(\"Ingrese sus datos de inicio de sesi\u00f3n: (ingrese 3 para cerrar el programa)\") user_attempt = str(input(\"Usuario: \")) pass_attempt = str(input(\"Contrase\u00f1a: \")) if user_attempt == \"3\" : return False for i in range(len(self._df_cliente)): if self._df_cliente.iloc[i][1] == user_attempt : if self._df_cliente.iloc[i][2] == pass_attempt : aux = True break else : aux = False break if aux == True : break if aux == False : print(\"Error a la hora de ingresar el usuario o contrase\u00f1a\") return True def registro_admin(self) -> bool: while(True): print(\"Ingrese el n\u00famero de lo que quiere hacer:\" , \"1) Nuevo administrador\" , \"2) Salir\" , sep = \"\\n\") x = int(input(\":\")) if x == 1: aux = True while aux == True: nuevo_usuario = str(input(\"Ingrese el usuario del administrador: (ingrese 3 para cancelar la operaci\u00f3n)\")) self.usuario(nuevo_usuario) if nuevo_usuario == \"3\" : aux = False return False for i in range(len(self._df_admin)): if self._df_admin.iloc[i][1] == nuevo_usuario : print(\"El usuario ya est\u00e1 en uso, ingrese uno nuevo.\") break if i == len(self._df_admin) - 1: aux = False nuevo_nombre = str(input(\"Ingrese el nombre del administrador: \")) self.nombre(nuevo_nombre) nuevo_password = str(input(\"Ingrese la contrase\u00f1a del administrador: \")) self.password(nuevo_password) nuevo_direccion = str(input(\"Ingrese la direcci\u00f3n del administrador: \")) self.direccion(nuevo_direccion) nuevo_telefono = str(input(\"Ingrese tel\u00e9fono del administrador: \")) self.telefono(nuevo_telefono) self.codigo(len(self._df_admin) + 1) print(\"Los datos ingresados fueron:\") print(self.nombre) print(self.usuario) print(self.password) print(self.direccion) print(self.telefono) print(self.codigo) print(\"Si hay alg\u00fan dato erroneo, favor de ingresar 1, si todos los datos son correctos ingresar 2\") while(True): y = int(input(\":\")) if y == 1: print(\"Regresando al men\u00fa de opciones de usuario\") break elif y == 2: df_aux_1 = pd.DataFrame({\"Nombre\":self.nombre , \"usuario\": self.usuario, \"password\": self.password, \"direcci\u00f3n\": self.direccion, \"tel\u00e9fono\": self.telefono, \"c\u00f3digo\": self.codigo}) df_aux_2 = pd.concat([self._df_admin, df_aux_1]) self._df_admin = df_aux_2 else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\") elif x == 2: break else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\") return True def registro_clientes(self) -> None: while(True): print(\"Ingrese el n\u00famero de lo que quiere hacer:\" , \"1) Nuevo cliente\" , \"2) Salir\" , sep = \"\\n\") x = int(input(\":\")) if x == 1: aux = True while aux == True: nuevo_usuario = str(input(\"Ingrese el usuario del administrador: (ingrese 3 para cancelar la operaci\u00f3n)\")) self.usuario(nuevo_usuario) if nuevo_usuario == \"3\" : aux = False return False for i in range(len(self._df_cliente)): if self._df_cliente.iloc[i][1] == nuevo_usuario : print(\"El usuario ya est\u00e1 en uso, ingrese uno nuevo.\") break if i == len(self._df_cliente) - 1: aux = False nuevo_usuario = str(input(\"Ingrese el usuario del cliente: \")) self.usuario(nuevo_usuario) nuevo_password = str(input(\"Ingrese la contrase\u00f1a del cliente: \")) self.password(nuevo_password) nuevo_direccion = str(input(\"Ingrese la direcci\u00f3n del cliente: \")) self.direccion(nuevo_direccion) nuevo_telefono = str(input(\"Ingrese tel\u00e9fono del cliente: \")) self.telefono(nuevo_telefono) nuevo_email = str(input(\"Ingrese email del cliente: \")) self.email(nuevo_email) nueva_tarjeta = str(input(\"Ingrese el n\u00famero de tarjeta del cliente: \")) self.tarjeta(nueva_tarjeta) print(\"Los datos ingresados fueron:\") print(self.nombre) print(self.usuario) print(self.password) print(self.direccion) print(self.telefono) print(self.email) print(self.tarjeta) print(\"Si hay alg\u00fan dato erroneo, favor de ingresar 1, si todos los datos son correctos ingresar 2\") while(True): y = int(input(\":\")) if y == 1: print(\"Regresando al men\u00fa de opciones de usuario\") break elif y == 2: df_aux_1 = pd.DataFrame({\"Nombre\":self.nombre , \"usuario\": self.usuario, \"password\": self.password, \"direcci\u00f3n\": self.direccion, \"tel\u00e9fono\": self.telefono, \"email\": self.email, \"n\u00fam tarjeta\": self.tarjeta}) df_aux_2 = pd.concat([self._df_cliente, df_aux_1]) self._df_cliente = df_aux_2 else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\") elif x == 2: break else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\")","title":"Clase Administrador de Personas"},{"location":"Admin_Personas/#clase-administrador-de-personas","text":"from InterfazPersona import IntPersona from Persona import Persona from PersonaAdmin import PersonaAdmin from PersonaCliente import PersonaCliente import pandas as pd class AdministradorPersonas: def __init__(self) -> None: pass _df_admin = pd.DataFrame _df_cliente = pd.DataFrame def mostrar_administradores(self): self._df_admin = pd.read_csv(\"development//clases_codigos//archives//Administradores.csv\") self._df_admin.head(len(self._df_admin)) def mostrar_clientes(self): self._df_cliente = pd.read_csv(\"development//clases_codigos//archives//Clientes.csv\") self._df_cliente.head(len(self._df_cliente)) def inicio_sesion_admin(self) -> None: while(True): print(\"Ingrese sus datos de inicio de sesi\u00f3n: (ingrese 3 para cerrar el programa)\") user_attempt = str(input(\"Usuario: \")) pass_attempt = str(input(\"Contrase\u00f1a: \")) if user_attempt == \"3\" : return False for i in range(len(self._df_admin)): if self._df_admin.iloc[i][1] == user_attempt : if self._df_admin.iloc[i][2] == pass_attempt : aux = True break else : aux = False break if aux == True : break if aux == False : print(\"Error a la hora de ingresar el usuario o contrase\u00f1a\") return True def inicio_sesion_cliente(self) -> None: while(True): print(\"Ingrese sus datos de inicio de sesi\u00f3n: (ingrese 3 para cerrar el programa)\") user_attempt = str(input(\"Usuario: \")) pass_attempt = str(input(\"Contrase\u00f1a: \")) if user_attempt == \"3\" : return False for i in range(len(self._df_cliente)): if self._df_cliente.iloc[i][1] == user_attempt : if self._df_cliente.iloc[i][2] == pass_attempt : aux = True break else : aux = False break if aux == True : break if aux == False : print(\"Error a la hora de ingresar el usuario o contrase\u00f1a\") return True def registro_admin(self) -> bool: while(True): print(\"Ingrese el n\u00famero de lo que quiere hacer:\" , \"1) Nuevo administrador\" , \"2) Salir\" , sep = \"\\n\") x = int(input(\":\")) if x == 1: aux = True while aux == True: nuevo_usuario = str(input(\"Ingrese el usuario del administrador: (ingrese 3 para cancelar la operaci\u00f3n)\")) self.usuario(nuevo_usuario) if nuevo_usuario == \"3\" : aux = False return False for i in range(len(self._df_admin)): if self._df_admin.iloc[i][1] == nuevo_usuario : print(\"El usuario ya est\u00e1 en uso, ingrese uno nuevo.\") break if i == len(self._df_admin) - 1: aux = False nuevo_nombre = str(input(\"Ingrese el nombre del administrador: \")) self.nombre(nuevo_nombre) nuevo_password = str(input(\"Ingrese la contrase\u00f1a del administrador: \")) self.password(nuevo_password) nuevo_direccion = str(input(\"Ingrese la direcci\u00f3n del administrador: \")) self.direccion(nuevo_direccion) nuevo_telefono = str(input(\"Ingrese tel\u00e9fono del administrador: \")) self.telefono(nuevo_telefono) self.codigo(len(self._df_admin) + 1) print(\"Los datos ingresados fueron:\") print(self.nombre) print(self.usuario) print(self.password) print(self.direccion) print(self.telefono) print(self.codigo) print(\"Si hay alg\u00fan dato erroneo, favor de ingresar 1, si todos los datos son correctos ingresar 2\") while(True): y = int(input(\":\")) if y == 1: print(\"Regresando al men\u00fa de opciones de usuario\") break elif y == 2: df_aux_1 = pd.DataFrame({\"Nombre\":self.nombre , \"usuario\": self.usuario, \"password\": self.password, \"direcci\u00f3n\": self.direccion, \"tel\u00e9fono\": self.telefono, \"c\u00f3digo\": self.codigo}) df_aux_2 = pd.concat([self._df_admin, df_aux_1]) self._df_admin = df_aux_2 else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\") elif x == 2: break else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\") return True def registro_clientes(self) -> None: while(True): print(\"Ingrese el n\u00famero de lo que quiere hacer:\" , \"1) Nuevo cliente\" , \"2) Salir\" , sep = \"\\n\") x = int(input(\":\")) if x == 1: aux = True while aux == True: nuevo_usuario = str(input(\"Ingrese el usuario del administrador: (ingrese 3 para cancelar la operaci\u00f3n)\")) self.usuario(nuevo_usuario) if nuevo_usuario == \"3\" : aux = False return False for i in range(len(self._df_cliente)): if self._df_cliente.iloc[i][1] == nuevo_usuario : print(\"El usuario ya est\u00e1 en uso, ingrese uno nuevo.\") break if i == len(self._df_cliente) - 1: aux = False nuevo_usuario = str(input(\"Ingrese el usuario del cliente: \")) self.usuario(nuevo_usuario) nuevo_password = str(input(\"Ingrese la contrase\u00f1a del cliente: \")) self.password(nuevo_password) nuevo_direccion = str(input(\"Ingrese la direcci\u00f3n del cliente: \")) self.direccion(nuevo_direccion) nuevo_telefono = str(input(\"Ingrese tel\u00e9fono del cliente: \")) self.telefono(nuevo_telefono) nuevo_email = str(input(\"Ingrese email del cliente: \")) self.email(nuevo_email) nueva_tarjeta = str(input(\"Ingrese el n\u00famero de tarjeta del cliente: \")) self.tarjeta(nueva_tarjeta) print(\"Los datos ingresados fueron:\") print(self.nombre) print(self.usuario) print(self.password) print(self.direccion) print(self.telefono) print(self.email) print(self.tarjeta) print(\"Si hay alg\u00fan dato erroneo, favor de ingresar 1, si todos los datos son correctos ingresar 2\") while(True): y = int(input(\":\")) if y == 1: print(\"Regresando al men\u00fa de opciones de usuario\") break elif y == 2: df_aux_1 = pd.DataFrame({\"Nombre\":self.nombre , \"usuario\": self.usuario, \"password\": self.password, \"direcci\u00f3n\": self.direccion, \"tel\u00e9fono\": self.telefono, \"email\": self.email, \"n\u00fam tarjeta\": self.tarjeta}) df_aux_2 = pd.concat([self._df_cliente, df_aux_1]) self._df_cliente = df_aux_2 else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\") elif x == 2: break else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\")","title":"Clase Administrador de Personas"},{"location":"Admin_Producto/","text":"Clase Administrador de Productos import pandas as pd from Ingrediente import Ingrediente class AdministradorProducto: _lista_disponible = [Ingrediente] _lista_no_disponible = [Ingrediente] def __init__(self) -> None: pass @property def lista_disponible(self): return self._lista_disponible @lista_disponible.setter def lista_disponible(self, lista:list): self._lista_disponible = lista @property def lista_no_disponible(self): return self._lista_no_disponible @lista_no_disponible.setter def lista_no_disponible(self, lista:list): self._lista_no_disponible = lista def crear_listas(self) -> None: lista_aux = [] df_ingredientes = pd.read_csv(\"development//clases_codigos//archives//IngredientesFinal.csv\") lista_aux = [df_ingredientes.to_numpy().tolist] for i in range(len(lista_aux)): ingrediente_aux = Ingrediente(lista_aux[i][1], lista_aux[i][3], lista_aux[i][2], lista_aux[i][4], lista_aux[i][5]) if ingrediente_aux.disponibilidad == True: self._lista_disponible.append(ingrediente_aux) else: self._lista_no_disponible.append(ingrediente_aux) def mostrar_disponibles(self) -> None: df_disponible = pd.DataFrame(self._lista_disponible) df_disponible.head(30) def mostrar_no_disponible(self) -> None: df_no_disponible = pd.DataFrame(self._lista_no_disponible) df_no_disponible.head(30) def modificar_inventario(self) -> bool: while(True): identificador = input(\"Ingrese el nombre del producto a modificar (Ingrese 0 si desea salir):\") if identificador != \"0\": comprobar = self._encontrar_producto(identificador) if comprobar > 0: self._modificar_disponible(comprobar-1) elif comprobar < 0: self._modificar_no_disponible((comprobar*-1)-1) else: print(\"Error. El producto ingresado no existe.\") else: return False def _encontrar_producto(self, producto:str) -> int: for i in range(len(self._lista_disponible)): if self._lista_disponible[i].nombre == producto: return i+1 for j in range(len(self._lista_no_disponible)): if self._lista_no_disponible[j].nombre == producto: return -j-1 return 0 def _modificar_disponible(self, identificador:int) -> bool: while(True): print(\"Opciones a modificar:\") print(\"1) Nombre.\", \"2) Cantidad.\", \"3) Tipo.\" , \"4) Precio de venta.\", \"5) Precio de compra.\", \"6) En caso de que desee salir, presione \\\"6\\\".\", sep = \"\\n\") opcion = int(input(\"Ingrese el dato a cambiar:\")) if opcion == 1: print(\"Nombre antiguo: \" + self.lista_disponible[identificador].nombre) nuevo_nombre = input(\"Ingrese el nuevo nombre del producto:\") self._lista_disponible[identificador].nombre(nuevo_nombre) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 2: print(\"Cantidad antigua: \" + self.lista_disponible[identificador].cantidad) nueva_cantidad = float(input(\"Ingrese la nueva cantidad del producto (en kg):\")) self.lista_disponible[identificador].cantidad(nueva_cantidad) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 3: print(\"Tipo antiguo: \" + self.lista_disponible[identificador].tipo) nuevo_tipo = input(\"Ingrese el nuevo tipo del producto:\") self.lista_disponible[identificador].tipo(nuevo_tipo) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 4: print(\"Precio de venta antiguo: $\" + self.lista_disponible[identificador].precio_venta) nuevo_precio_venta = float(input(\"Ingrese el nuevo precio de venta:\")) self.lista_disponible[identificador].precio_venta(nuevo_precio_venta) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 5: print(\"Precio de compra antiguo: $\" + self.lista_disponible[identificador].precio_compra) nuevo_precio_compra = float(input(\"Ingrese el nuevo precio de compra:\")) self.lista_disponible[identificador].precio_compra(nuevo_precio_compra) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 6: print(\"Adios.\") return True else: print(\"Ingrese un dato v\u00e1lido.\") def _modificar_no_disponible(self, identificador:int) -> bool: while(True): print(\"Opciones a modificar:\") print(\"1) Nombre.\", \"2) Cantidad.\", \"3) Tipo.\" , \"4) Precio de venta.\", \"5) Precio de compra.\", \"6) En caso de que desee salir, presione \\\"6\\\".\", sep = \"\\n\") opcion = int(input(\"Ingrese el dato a cambiar:\")) if opcion == 1: print(\"Nombre antiguo: \" + self.lista_no_disponible[identificador].nombre) nuevo_nombre = input(\"Ingrese el nuevo nombre del producto:\") self._lista_no_disponible[identificador].nombre(nuevo_nombre) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 2: print(\"Cantidad antigua: \" + self.lista_no_disponible[identificador].cantidad) nueva_cantidad = float(input(\"Ingrese la nueva cantidad del producto (en kg):\")) self.lista_no_disponible[identificador].cantidad(nueva_cantidad) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 3: print(\"Tipo antiguo: \" + self.lista_no_disponible[identificador].tipo) nuevo_tipo = input(\"Ingrese el nuevo tipo del producto:\") self.lista_no_disponible[identificador].tipo(nuevo_tipo) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 4: print(\"Precio de venta antiguo: $\" + self.lista_no_disponible[identificador].precio_venta) nuevo_precio_venta = float(input(\"Ingrese el nuevo precio de venta:\")) self.lista_no_disponible[identificador].precio_venta(nuevo_precio_venta) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 5: print(\"Precio de compra antiguo: $\" + self.lista_no_disponible[identificador].precio_compra) nuevo_precio_compra = float(input(\"Ingrese el nuevo precio de compra:\")) self.lista_no_disponible[identificador].precio_compra(nuevo_precio_compra) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 6: print(\"Adios.\") return True else: print(\"Ingrese un dato v\u00e1lido.\")","title":"CODE_Admin_Producto"},{"location":"Admin_Producto/#clase-administrador-de-productos","text":"import pandas as pd from Ingrediente import Ingrediente class AdministradorProducto: _lista_disponible = [Ingrediente] _lista_no_disponible = [Ingrediente] def __init__(self) -> None: pass @property def lista_disponible(self): return self._lista_disponible @lista_disponible.setter def lista_disponible(self, lista:list): self._lista_disponible = lista @property def lista_no_disponible(self): return self._lista_no_disponible @lista_no_disponible.setter def lista_no_disponible(self, lista:list): self._lista_no_disponible = lista def crear_listas(self) -> None: lista_aux = [] df_ingredientes = pd.read_csv(\"development//clases_codigos//archives//IngredientesFinal.csv\") lista_aux = [df_ingredientes.to_numpy().tolist] for i in range(len(lista_aux)): ingrediente_aux = Ingrediente(lista_aux[i][1], lista_aux[i][3], lista_aux[i][2], lista_aux[i][4], lista_aux[i][5]) if ingrediente_aux.disponibilidad == True: self._lista_disponible.append(ingrediente_aux) else: self._lista_no_disponible.append(ingrediente_aux) def mostrar_disponibles(self) -> None: df_disponible = pd.DataFrame(self._lista_disponible) df_disponible.head(30) def mostrar_no_disponible(self) -> None: df_no_disponible = pd.DataFrame(self._lista_no_disponible) df_no_disponible.head(30) def modificar_inventario(self) -> bool: while(True): identificador = input(\"Ingrese el nombre del producto a modificar (Ingrese 0 si desea salir):\") if identificador != \"0\": comprobar = self._encontrar_producto(identificador) if comprobar > 0: self._modificar_disponible(comprobar-1) elif comprobar < 0: self._modificar_no_disponible((comprobar*-1)-1) else: print(\"Error. El producto ingresado no existe.\") else: return False def _encontrar_producto(self, producto:str) -> int: for i in range(len(self._lista_disponible)): if self._lista_disponible[i].nombre == producto: return i+1 for j in range(len(self._lista_no_disponible)): if self._lista_no_disponible[j].nombre == producto: return -j-1 return 0 def _modificar_disponible(self, identificador:int) -> bool: while(True): print(\"Opciones a modificar:\") print(\"1) Nombre.\", \"2) Cantidad.\", \"3) Tipo.\" , \"4) Precio de venta.\", \"5) Precio de compra.\", \"6) En caso de que desee salir, presione \\\"6\\\".\", sep = \"\\n\") opcion = int(input(\"Ingrese el dato a cambiar:\")) if opcion == 1: print(\"Nombre antiguo: \" + self.lista_disponible[identificador].nombre) nuevo_nombre = input(\"Ingrese el nuevo nombre del producto:\") self._lista_disponible[identificador].nombre(nuevo_nombre) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 2: print(\"Cantidad antigua: \" + self.lista_disponible[identificador].cantidad) nueva_cantidad = float(input(\"Ingrese la nueva cantidad del producto (en kg):\")) self.lista_disponible[identificador].cantidad(nueva_cantidad) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 3: print(\"Tipo antiguo: \" + self.lista_disponible[identificador].tipo) nuevo_tipo = input(\"Ingrese el nuevo tipo del producto:\") self.lista_disponible[identificador].tipo(nuevo_tipo) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 4: print(\"Precio de venta antiguo: $\" + self.lista_disponible[identificador].precio_venta) nuevo_precio_venta = float(input(\"Ingrese el nuevo precio de venta:\")) self.lista_disponible[identificador].precio_venta(nuevo_precio_venta) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 5: print(\"Precio de compra antiguo: $\" + self.lista_disponible[identificador].precio_compra) nuevo_precio_compra = float(input(\"Ingrese el nuevo precio de compra:\")) self.lista_disponible[identificador].precio_compra(nuevo_precio_compra) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 6: print(\"Adios.\") return True else: print(\"Ingrese un dato v\u00e1lido.\") def _modificar_no_disponible(self, identificador:int) -> bool: while(True): print(\"Opciones a modificar:\") print(\"1) Nombre.\", \"2) Cantidad.\", \"3) Tipo.\" , \"4) Precio de venta.\", \"5) Precio de compra.\", \"6) En caso de que desee salir, presione \\\"6\\\".\", sep = \"\\n\") opcion = int(input(\"Ingrese el dato a cambiar:\")) if opcion == 1: print(\"Nombre antiguo: \" + self.lista_no_disponible[identificador].nombre) nuevo_nombre = input(\"Ingrese el nuevo nombre del producto:\") self._lista_no_disponible[identificador].nombre(nuevo_nombre) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 2: print(\"Cantidad antigua: \" + self.lista_no_disponible[identificador].cantidad) nueva_cantidad = float(input(\"Ingrese la nueva cantidad del producto (en kg):\")) self.lista_no_disponible[identificador].cantidad(nueva_cantidad) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 3: print(\"Tipo antiguo: \" + self.lista_no_disponible[identificador].tipo) nuevo_tipo = input(\"Ingrese el nuevo tipo del producto:\") self.lista_no_disponible[identificador].tipo(nuevo_tipo) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 4: print(\"Precio de venta antiguo: $\" + self.lista_no_disponible[identificador].precio_venta) nuevo_precio_venta = float(input(\"Ingrese el nuevo precio de venta:\")) self.lista_no_disponible[identificador].precio_venta(nuevo_precio_venta) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 5: print(\"Precio de compra antiguo: $\" + self.lista_no_disponible[identificador].precio_compra) nuevo_precio_compra = float(input(\"Ingrese el nuevo precio de compra:\")) self.lista_no_disponible[identificador].precio_compra(nuevo_precio_compra) print(\"Sus cambios se realizaron con \u00e9xito.\") elif opcion == 6: print(\"Adios.\") return True else: print(\"Ingrese un dato v\u00e1lido.\")","title":"Clase Administrador de Productos"},{"location":"Alimento/","text":"Clase Alimento from InterfazAlimentos import AlimentoInt from Ingrediente import Ingrediente from typing import List class Alimento(AlimentoInt): _precio = float _lista_ingredientes = list(Ingrediente) def __init__(self, id:int, nombre:str, lista_ingredientes:List[Ingrediente]) -> None: self._id = id self._nombre = nombre self._lista_ingredientes = lista_ingredientes @property def nombre(self): return self._nombre @property def id(self): return self._id @property def lista_ingredientes(self): return self._lista_ingredientes @property def precio(self): return self._precio @precio.setter def precio(self, nuevo_precio): self._precio = nuevo_precio def mostrar_caracteristicas(self): print(\"Id: \" + self.id, \"\\nNombre: \" + self.nombre, \"\\nIngredientes: \", *self.lista_ingredientes) def calcular_precio(self) -> float: precio_aux = float(0) for i in range(self.lista_ingredientes): precio_aux += self._lista_ingredientes[i].precio_venta self.precio(precio_aux) return self.precio","title":"CODE_Alimento"},{"location":"Alimento/#clase-alimento","text":"from InterfazAlimentos import AlimentoInt from Ingrediente import Ingrediente from typing import List class Alimento(AlimentoInt): _precio = float _lista_ingredientes = list(Ingrediente) def __init__(self, id:int, nombre:str, lista_ingredientes:List[Ingrediente]) -> None: self._id = id self._nombre = nombre self._lista_ingredientes = lista_ingredientes @property def nombre(self): return self._nombre @property def id(self): return self._id @property def lista_ingredientes(self): return self._lista_ingredientes @property def precio(self): return self._precio @precio.setter def precio(self, nuevo_precio): self._precio = nuevo_precio def mostrar_caracteristicas(self): print(\"Id: \" + self.id, \"\\nNombre: \" + self.nombre, \"\\nIngredientes: \", *self.lista_ingredientes) def calcular_precio(self) -> float: precio_aux = float(0) for i in range(self.lista_ingredientes): precio_aux += self._lista_ingredientes[i].precio_venta self.precio(precio_aux) return self.precio","title":"Clase Alimento"},{"location":"Diagramas/","text":"Diagrama de clases Diagrama de clases Diagrama de Procesos Diagrama de Procesos Diagrama de Casos de Uso Diagrama de Casos de Uso","title":"Diagramas"},{"location":"Guia_Usuario/","text":"User_Guide -Simulacion de la terminal- Una vez iniciado el programa, se nos desplegara el siguiente men\u00fa en la terminal: Bienvenido \u00bfDesea iniciar sesi\u00f3n o registrarse? Ingrese 1 si desea iniciar sesi\u00f3n. Ingrese 2 si desea registrase. Ingrese 3 si desea salir: Seleccionando el caso 2: \"Ingrese el 2 si desea registrarse\" Nos despliega el siguiente men\u00fa: Ingrese el n\u00famero de los que quiere hacer: 1) Nuevo Cliente 2) Salir Seleccionando la opci\u00f3n 1, se nos desplegar\u00e1 el siguiente men\u00fa el cual completaremos con los siguientes datos ejemplo: Usuario: Ale12 Nombre: Alejandro Contrase\u00f1a: 12\u00f1345A Direcci\u00f3n: Naranjos 3 52679 CDMX Telefono: 5546753457 Correo: alejandro71234@gmail.com Numero de tarjeta: 521234567890 NOTA: Esta informacion se guardare en un DataFrame llamado Clientes.csv Los datos ingresados fueron: Alejandro Ale12 12\u00f1345A Naranjos 3 52679 CMDX 5546753457 521234567890 Si hay alg\u00fan dato erroneo, favor de ingresar 1, si todos son correctos inrgesar 2 Al seleccionar la opcion 1 , se nos mostrar\u00e1 el siguiente men\u00fa, en caso contrario podremos regresar a hacer una correccion de los datos que deseamos ingresar. Bienvenido Ale12 \u00bfQu\u00e9 desea hacer hoy? Ingrese alguna de las siguientes opciones: 1) Ver el men\u00fa. 2) Ver pedidos anteriores y recientes. 3) Ordenar productos. 4) Salir. Seleccionando el caso 1: Ver el men\u00fa El menu es: ID Alimento Descripcion Precio 1 Hamburguesa Clasica Carne molida, Pan de hamburguesa, Queso 78 2 Hamburguesa con Queso Carne molida, Pan de hamburguesa, Cebolla, Queso cheddar, Queso 89 3 Hamburguesa Vegetariana Pan integral, Portobello asado, Queso, Queso feta 68 4 Hamburguesa BBQ Carne molida, Pan de hamburguesa, Cebolla caramelizada, Queso cheddar, Salsa BBQ 82 5 Hamburguesa de Pescado Filete de pescado, Pan de hamburguesa, Queso 59 6 Hamburguesa de Pollo Pechuga de pollo, Pan de hamburguesa, Queso 69 7 Hamburguesa de Portobello Portobello asado, Pan de hamburguesa, Queso cheddar 46 8 Hamburguesa Gourmet Carne molida, Pan integral, Cebolla caramelizada, Queso cheddar, Salsa BBQ 84 9 Agua Agua 35 10 Refresco Refresco 25 Ingrese alguna de las siguientes opciones: 1) Ver el men\u00fa. 2) Ver pedidos anteriores y recientes. 3) Ordenar productos. 4) Salir. Seleccionando opcion 3 la cual es: \"Ordenar Productos\" El cual nos desplegar\u00e1 de nuevo el men\u00fa junto con el siguiente formulario: NOTA: En este ejemplo el formulario se completar\u00e1 con: 1 ,1 ,1,10 ,1 ,2. Los cuales son valores que corresponden al ID del alimento, cantidad de articulos, opcion a agregar algo m\u00e1s, ID del otro alimento, canidad de articulos del alimento seleccionado y la opcion 2 para cerrar el pedido El menu es: ID Alimento Descripcion Precio 1 Hamburguesa Clasica Carne molida, Pan de hamburguesa, Queso 78 2 Hamburguesa con Queso Carne molida, Pan de hamburguesa, Cebolla, Queso cheddar, Queso 89 3 Hamburguesa Vegetariana Pan integral, Portobello asado, Queso, Queso feta 68 4 Hamburguesa BBQ Carne molida, Pan de hamburguesa, Cebolla caramelizada, Queso cheddar, Salsa BBQ 82 5 Hamburguesa de Pescado Filete de pescado, Pan de hamburguesa, Queso 59 6 Hamburguesa de Pollo Pechuga de pollo, Pan de hamburguesa, Queso 69 7 Hamburguesa de Portobello Portobello asado, Pan de hamburguesa, Queso cheddar 46 8 Hamburguesa Gourmet Carne molida, Pan integral, Cebolla caramelizada, Queso cheddar, Salsa BBQ 84 9 Agua Agua 35 10 Refresco Refresco 25 Ingrese el n\u00famero del producto que desea pedir (Ingrese 0 para cancelar) : 1 Ingrese la cantidad de articulos que desea: 1 Si desea pedir otra cosa ingrese 1, sino ingrese 2: : 1 Ingrese el n\u00famero del producto que desea pedir (Ingrese 0 para cancelar) : 10 Ingrese la cantidad de articulos que desea:1 Si desea pedir otra cosa ingrese 1, sino ingrese 2: 2 Una vez completado ese formulario, se cierra el pedido y posteriormente se nos despliega el siguiente men\u00fa: Su pedido se ha realizado con \u00e9xito. Llegar\u00e1 en 30 minutos o menos. Ingrese alguna de las siguientes opciones: 1) Ver el men\u00fa. 2) Ver pedidos anteriores y recientes. 3) Ordenar productos. 4) Salir. Posterior a esto, elegiremos la opcio\u00f3n 2 para ver la lista de pedidos, el cual nos lo mostrara en un DataFrame junto con el men\u00fa de opciones. usuario precio 1 2 3 4 5 6 7 8 9 10 fecha 0 Ale12 103.0 1 0 0 0 0 0 0 0 0 1 2023-11-27 13:42:26.751140 Ingrese alguna de las siguientes opciones: 1) Ver el men\u00fa. 2) Ver pedidos anteriores y recientes. 3) Ordenar productos. 4) Salir. Seleccionando la opci\u00f3n 4: \"Salir\" Hasta Luego","title":"UserGuide"},{"location":"Guia_Usuario/#user_guide","text":"-Simulacion de la terminal- Una vez iniciado el programa, se nos desplegara el siguiente men\u00fa en la terminal: Bienvenido \u00bfDesea iniciar sesi\u00f3n o registrarse? Ingrese 1 si desea iniciar sesi\u00f3n. Ingrese 2 si desea registrase. Ingrese 3 si desea salir: Seleccionando el caso 2: \"Ingrese el 2 si desea registrarse\" Nos despliega el siguiente men\u00fa: Ingrese el n\u00famero de los que quiere hacer: 1) Nuevo Cliente 2) Salir Seleccionando la opci\u00f3n 1, se nos desplegar\u00e1 el siguiente men\u00fa el cual completaremos con los siguientes datos ejemplo: Usuario: Ale12 Nombre: Alejandro Contrase\u00f1a: 12\u00f1345A Direcci\u00f3n: Naranjos 3 52679 CDMX Telefono: 5546753457 Correo: alejandro71234@gmail.com Numero de tarjeta: 521234567890 NOTA: Esta informacion se guardare en un DataFrame llamado Clientes.csv Los datos ingresados fueron: Alejandro Ale12 12\u00f1345A Naranjos 3 52679 CMDX 5546753457 521234567890 Si hay alg\u00fan dato erroneo, favor de ingresar 1, si todos son correctos inrgesar 2 Al seleccionar la opcion 1 , se nos mostrar\u00e1 el siguiente men\u00fa, en caso contrario podremos regresar a hacer una correccion de los datos que deseamos ingresar. Bienvenido Ale12 \u00bfQu\u00e9 desea hacer hoy? Ingrese alguna de las siguientes opciones: 1) Ver el men\u00fa. 2) Ver pedidos anteriores y recientes. 3) Ordenar productos. 4) Salir. Seleccionando el caso 1: Ver el men\u00fa El menu es: ID Alimento Descripcion Precio 1 Hamburguesa Clasica Carne molida, Pan de hamburguesa, Queso 78 2 Hamburguesa con Queso Carne molida, Pan de hamburguesa, Cebolla, Queso cheddar, Queso 89 3 Hamburguesa Vegetariana Pan integral, Portobello asado, Queso, Queso feta 68 4 Hamburguesa BBQ Carne molida, Pan de hamburguesa, Cebolla caramelizada, Queso cheddar, Salsa BBQ 82 5 Hamburguesa de Pescado Filete de pescado, Pan de hamburguesa, Queso 59 6 Hamburguesa de Pollo Pechuga de pollo, Pan de hamburguesa, Queso 69 7 Hamburguesa de Portobello Portobello asado, Pan de hamburguesa, Queso cheddar 46 8 Hamburguesa Gourmet Carne molida, Pan integral, Cebolla caramelizada, Queso cheddar, Salsa BBQ 84 9 Agua Agua 35 10 Refresco Refresco 25 Ingrese alguna de las siguientes opciones: 1) Ver el men\u00fa. 2) Ver pedidos anteriores y recientes. 3) Ordenar productos. 4) Salir. Seleccionando opcion 3 la cual es: \"Ordenar Productos\" El cual nos desplegar\u00e1 de nuevo el men\u00fa junto con el siguiente formulario: NOTA: En este ejemplo el formulario se completar\u00e1 con: 1 ,1 ,1,10 ,1 ,2. Los cuales son valores que corresponden al ID del alimento, cantidad de articulos, opcion a agregar algo m\u00e1s, ID del otro alimento, canidad de articulos del alimento seleccionado y la opcion 2 para cerrar el pedido El menu es: ID Alimento Descripcion Precio 1 Hamburguesa Clasica Carne molida, Pan de hamburguesa, Queso 78 2 Hamburguesa con Queso Carne molida, Pan de hamburguesa, Cebolla, Queso cheddar, Queso 89 3 Hamburguesa Vegetariana Pan integral, Portobello asado, Queso, Queso feta 68 4 Hamburguesa BBQ Carne molida, Pan de hamburguesa, Cebolla caramelizada, Queso cheddar, Salsa BBQ 82 5 Hamburguesa de Pescado Filete de pescado, Pan de hamburguesa, Queso 59 6 Hamburguesa de Pollo Pechuga de pollo, Pan de hamburguesa, Queso 69 7 Hamburguesa de Portobello Portobello asado, Pan de hamburguesa, Queso cheddar 46 8 Hamburguesa Gourmet Carne molida, Pan integral, Cebolla caramelizada, Queso cheddar, Salsa BBQ 84 9 Agua Agua 35 10 Refresco Refresco 25 Ingrese el n\u00famero del producto que desea pedir (Ingrese 0 para cancelar) : 1 Ingrese la cantidad de articulos que desea: 1 Si desea pedir otra cosa ingrese 1, sino ingrese 2: : 1 Ingrese el n\u00famero del producto que desea pedir (Ingrese 0 para cancelar) : 10 Ingrese la cantidad de articulos que desea:1 Si desea pedir otra cosa ingrese 1, sino ingrese 2: 2 Una vez completado ese formulario, se cierra el pedido y posteriormente se nos despliega el siguiente men\u00fa: Su pedido se ha realizado con \u00e9xito. Llegar\u00e1 en 30 minutos o menos. Ingrese alguna de las siguientes opciones: 1) Ver el men\u00fa. 2) Ver pedidos anteriores y recientes. 3) Ordenar productos. 4) Salir. Posterior a esto, elegiremos la opcio\u00f3n 2 para ver la lista de pedidos, el cual nos lo mostrara en un DataFrame junto con el men\u00fa de opciones. usuario precio 1 2 3 4 5 6 7 8 9 10 fecha 0 Ale12 103.0 1 0 0 0 0 0 0 0 0 1 2023-11-27 13:42:26.751140 Ingrese alguna de las siguientes opciones: 1) Ver el men\u00fa. 2) Ver pedidos anteriores y recientes. 3) Ordenar productos. 4) Salir. Seleccionando la opci\u00f3n 4: \"Salir\" Hasta Luego","title":"User_Guide"},{"location":"Ingrediente/","text":"Clase Ingrediente from InterfazAlimentos import Alimento class Ingrediente(Alimento): def __init__(self, nombre:str, cantidad:float, tipo:str, precio_venta:float, precio_compra:float, ) -> None: self._nombre = nombre self._cantidad = cantidad self._tipo = tipo self._precio_venta = precio_venta self._precio_compra = precio_compra self._disponibilidad = self.validar_disponibilidad() @property def nombre(self): return self._nombre @nombre.setter def nombre(self, new_nombre): self._nombre = new_nombre @property def cantidad(self): return self.cantidad @cantidad.setter def cantidad(self, new_cantidad): self._cantidad = new_cantidad @property def tipo(self): return self._tipo @tipo.setter def tipo(self, new_tipo): self._tipo = new_tipo @property def precio_venta(self): return self._precio_venta @precio_venta.setter def precio_venta(self, new_precio_venta): self._precio_venta = new_precio_venta @property def precio_compra(self): return self._precio_compra @precio_compra.setter def precio_compra(self, new_precio_compra): self._precio_compra = new_precio_compra @property def disponibilidad(self): return self._disponibilidad def validar_disponibilidad(self) -> bool: if self._cantidad > 0: return True return False def mostrar_caracteristicas(self): print(self.__dict__())","title":"CODE_Ingrediente"},{"location":"Ingrediente/#clase-ingrediente","text":"from InterfazAlimentos import Alimento class Ingrediente(Alimento): def __init__(self, nombre:str, cantidad:float, tipo:str, precio_venta:float, precio_compra:float, ) -> None: self._nombre = nombre self._cantidad = cantidad self._tipo = tipo self._precio_venta = precio_venta self._precio_compra = precio_compra self._disponibilidad = self.validar_disponibilidad() @property def nombre(self): return self._nombre @nombre.setter def nombre(self, new_nombre): self._nombre = new_nombre @property def cantidad(self): return self.cantidad @cantidad.setter def cantidad(self, new_cantidad): self._cantidad = new_cantidad @property def tipo(self): return self._tipo @tipo.setter def tipo(self, new_tipo): self._tipo = new_tipo @property def precio_venta(self): return self._precio_venta @precio_venta.setter def precio_venta(self, new_precio_venta): self._precio_venta = new_precio_venta @property def precio_compra(self): return self._precio_compra @precio_compra.setter def precio_compra(self, new_precio_compra): self._precio_compra = new_precio_compra @property def disponibilidad(self): return self._disponibilidad def validar_disponibilidad(self) -> bool: if self._cantidad > 0: return True return False def mostrar_caracteristicas(self): print(self.__dict__())","title":"Clase Ingrediente"},{"location":"Interfaces/","text":"Interfaz Alimentos from abc import abstractmethod from abc import ABCMeta class AlimentoInt(metaclass = ABCMeta): @abstractmethod def mostrar_caracteristicas(self): raise NotImplemented(\"No se implement\u00f3 la funci\u00f3n.\") Interfaz Organizador class Organizador: def ordenar_alfabeticamente(): pass def ordenar_lista(): pass def menu(): pass def configurar_datos(): pass Interfaz Persona from abc import abstractmethod from abc import ABCMeta class IntPersona(metaclass = ABCMeta): @abstractmethod def mostrar_datos(self): raise NotImplemented(\"No se implementa la clase.\") @abstractmethod def cambiar_datos(self): raise NotImplemented(\"No se implemetna la clase.\")","title":"CODE_Interfaces"},{"location":"Interfaces/#interfaz-alimentos","text":"from abc import abstractmethod from abc import ABCMeta class AlimentoInt(metaclass = ABCMeta): @abstractmethod def mostrar_caracteristicas(self): raise NotImplemented(\"No se implement\u00f3 la funci\u00f3n.\")","title":"Interfaz Alimentos"},{"location":"Interfaces/#interfaz-organizador","text":"class Organizador: def ordenar_alfabeticamente(): pass def ordenar_lista(): pass def menu(): pass def configurar_datos(): pass","title":"Interfaz Organizador"},{"location":"Interfaces/#interfaz-persona","text":"from abc import abstractmethod from abc import ABCMeta class IntPersona(metaclass = ABCMeta): @abstractmethod def mostrar_datos(self): raise NotImplemented(\"No se implementa la clase.\") @abstractmethod def cambiar_datos(self): raise NotImplemented(\"No se implemetna la clase.\")","title":"Interfaz Persona"},{"location":"Menu/","text":"Men\u00fa from Alimento import Alimento from AdministradorProductos import AdministradorProducto from Ingrediente import Ingrediente import pandas as pd class Menu: _lista_alimentos = [Alimento] def __init__(self) -> None: pass @property def lista_alimentos(self): return self._lista_alimentos def crear_df(self, administrador:AdministradorProducto) -> None: lista_ingredientes = [] menu_df = pd.read_csv(\"archives//MenuHamburguesasDef.csv\") lista_aux = [menu_df.to_numpy().tolist] for i in range(len(lista_aux)): lista_ingredientes.clear() for j in range(2, len(lista_aux[i])): lista_ingredientes.append(self._ubicar_ingrediente(administrador, lista_aux[i][j])) self._lista_alimentos.append(Alimento(lista_aux[i][0], lista_aux[i][1], lista_ingredientes)) def mostrar_menu(self) -> None: print(\"El menu es:\") for i in range(self.lista_alimentos): print((i+1) + \") \" + self.lista_alimentos[i].nombre + \"\\tPrecio: $\" + self.lista_alimentos[i].calcular_precio()) def mostrar_alimento(self, alimento:str) -> bool: for i in range(len(self.lista_alimentos)): if alimento == self.lista_alimentos[i].nombre: self.lista_alimentos[i].mostrar_caracteristicas() return True return False def _ubicar_ingrediente(self, administrador:AdministradorProducto, ingrediente:str) -> Ingrediente: for i in range(len(administrador.lista_disponible)): if ingrediente == administrador.lista_disponible[i].nombre: return administrador.lista_disponible[i] for j in range(len(administrador.lista_no_disponible)): if ingrediente == administrador.lista_no_disponible[i].nombre: return administrador.lista_no_disponible[i]","title":"CODE_Men\u00fa"},{"location":"Menu/#menu","text":"from Alimento import Alimento from AdministradorProductos import AdministradorProducto from Ingrediente import Ingrediente import pandas as pd class Menu: _lista_alimentos = [Alimento] def __init__(self) -> None: pass @property def lista_alimentos(self): return self._lista_alimentos def crear_df(self, administrador:AdministradorProducto) -> None: lista_ingredientes = [] menu_df = pd.read_csv(\"archives//MenuHamburguesasDef.csv\") lista_aux = [menu_df.to_numpy().tolist] for i in range(len(lista_aux)): lista_ingredientes.clear() for j in range(2, len(lista_aux[i])): lista_ingredientes.append(self._ubicar_ingrediente(administrador, lista_aux[i][j])) self._lista_alimentos.append(Alimento(lista_aux[i][0], lista_aux[i][1], lista_ingredientes)) def mostrar_menu(self) -> None: print(\"El menu es:\") for i in range(self.lista_alimentos): print((i+1) + \") \" + self.lista_alimentos[i].nombre + \"\\tPrecio: $\" + self.lista_alimentos[i].calcular_precio()) def mostrar_alimento(self, alimento:str) -> bool: for i in range(len(self.lista_alimentos)): if alimento == self.lista_alimentos[i].nombre: self.lista_alimentos[i].mostrar_caracteristicas() return True return False def _ubicar_ingrediente(self, administrador:AdministradorProducto, ingrediente:str) -> Ingrediente: for i in range(len(administrador.lista_disponible)): if ingrediente == administrador.lista_disponible[i].nombre: return administrador.lista_disponible[i] for j in range(len(administrador.lista_no_disponible)): if ingrediente == administrador.lista_no_disponible[i].nombre: return administrador.lista_no_disponible[i]","title":"Men\u00fa"},{"location":"Pedido/","text":"Pedido from Alimento import Alimento from Menu import Menu class Pedido: _estatus = str def __init__(self, id:int, nombre:str, lista_alimentos:dict(int), menu:Menu) -> None: self._id = id self._nombre_cliente = nombre self._lista_alimentos = lista_alimentos self._menu = menu self._precio = self._calcular_precio() @property def id(self): return self._id @id.setter def id(self, new_id): self._id = new_id @property def lista_alimentos(self): return self._lista_alimentos @lista_alimentos.setter def lista_alimentos(self, new_lista_alimentos): self._lista_alimentos = new_lista_alimentos @property def menu(self): return self._menu @property def precio(self): return self._precio @property def estatus(self): return self._estatus @estatus.setter def estatus(self, new_estatus): self._estatus = new_estatus def _calcular_precio(self) -> float: precio = float(0) for clave in self.lista_alimentos.keys(): if self.lista_alimentos.get(clave) !=0: for i in range(len(self.menu.lista_alimentos)): if clave == self.menu.lista_alimentos[i].id: precio += self.menu.lista_alimentos[i].precio*self.lista_alimentos.get(clave) break return precio def mostrar_pedido(self) -> None: print( \"El ID del pedido es:\\t\\t\" + self.id, \"A nombre de:\\t\\t\" + self._nombre_cliente, sep ='\\n' ) print(\"Los alimentos son:\") for clave in self.lista_alimentos.keys(): if self.lista_alimentos.get(clave) !=0 : for i in range(len(self.menu.lista_alimentos)): if self.menu.lista_alimentos[i].id == clave: print(self.menu.lista_alimentos[i].nombre + \": \\t\\t\" + self.lista_alimentos.get(i)) break print(\"Total a pagar:\\t\\t$\" + self.precio) Administrador de Pedidos from Pedido import Pedido import pandas as pd class AdministradorPedidos: _pedidos_df = pd.DataFrame def __init__(self) -> None: pass @property def pedidos_df(self): return self._pedidos_df def crear_df(self) -> bool: self.pedidos_df = pd.read_csv(\"archives//Pedidos.csv\") def mostrar_pedidos(self): self.pedidos_df.head(len(self.pedidos_df))","title":"CODE_Pedido"},{"location":"Pedido/#pedido","text":"from Alimento import Alimento from Menu import Menu class Pedido: _estatus = str def __init__(self, id:int, nombre:str, lista_alimentos:dict(int), menu:Menu) -> None: self._id = id self._nombre_cliente = nombre self._lista_alimentos = lista_alimentos self._menu = menu self._precio = self._calcular_precio() @property def id(self): return self._id @id.setter def id(self, new_id): self._id = new_id @property def lista_alimentos(self): return self._lista_alimentos @lista_alimentos.setter def lista_alimentos(self, new_lista_alimentos): self._lista_alimentos = new_lista_alimentos @property def menu(self): return self._menu @property def precio(self): return self._precio @property def estatus(self): return self._estatus @estatus.setter def estatus(self, new_estatus): self._estatus = new_estatus def _calcular_precio(self) -> float: precio = float(0) for clave in self.lista_alimentos.keys(): if self.lista_alimentos.get(clave) !=0: for i in range(len(self.menu.lista_alimentos)): if clave == self.menu.lista_alimentos[i].id: precio += self.menu.lista_alimentos[i].precio*self.lista_alimentos.get(clave) break return precio def mostrar_pedido(self) -> None: print( \"El ID del pedido es:\\t\\t\" + self.id, \"A nombre de:\\t\\t\" + self._nombre_cliente, sep ='\\n' ) print(\"Los alimentos son:\") for clave in self.lista_alimentos.keys(): if self.lista_alimentos.get(clave) !=0 : for i in range(len(self.menu.lista_alimentos)): if self.menu.lista_alimentos[i].id == clave: print(self.menu.lista_alimentos[i].nombre + \": \\t\\t\" + self.lista_alimentos.get(i)) break print(\"Total a pagar:\\t\\t$\" + self.precio)","title":"Pedido"},{"location":"Pedido/#administrador-de-pedidos","text":"from Pedido import Pedido import pandas as pd class AdministradorPedidos: _pedidos_df = pd.DataFrame def __init__(self) -> None: pass @property def pedidos_df(self): return self._pedidos_df def crear_df(self) -> bool: self.pedidos_df = pd.read_csv(\"archives//Pedidos.csv\") def mostrar_pedidos(self): self.pedidos_df.head(len(self.pedidos_df))","title":"Administrador de Pedidos"},{"location":"Persona/","text":"Clase Persona from InterfazPersona import IntPersona import abc class Persona(IntPersona): def __init__(self, nombre: str, usuario: str, password: str, direccion: str, telefono: str ): self._nombre = nombre self._usuario = usuario self._password = password self._direccion = direccion self._telefono = telefono @property def nombre(self): return self._nombre @nombre.setter def nombre(self, new_nombre): self._nombre = new_nombre @property def usuario(self): return self._usuario @usuario.setter def usuario(self, new_usuario): self._usuario = new_usuario @property def password(self): return self._password @password.setter def password(self, new_password): self._password = new_password @property def direccion(self): return self._direccion @direccion.setter def direccion(self, new_direccion): self._direccion = new_direccion @property def telefono(self): return self._telefono @telefono.setter def telefono(self, new_telefono): self._telefono = new_telefono def mostrar_datos(self) -> None: print(self.nombre) print(self.usuario) print(self.password) print(self.direccion) print(self.telefono) def cambiar_datos(self) -> None: while(True): print(\"Ingrese el n\u00famero del dato que desea cambiar:\" , \"1) Nombre\" , \"2) Usuario\" , \"3) Contrase\u00f1a\" , \"4) Direcci\u00f3n\" , \"5) Tel\u00e9fono\" , \"6) Salir\" , sep = \"\\n\") x = int(input(\":\")) if x == 1: print(\"El nombre anterior es:\" + self.nombre) nuevo_nombre = str(input(\"Ingrese el nuevo nombre (ingrese el nombre antiguo si no desea cambiarlo)\")) self.nombre(nuevo_nombre) elif x == 2: print(\"El usuario anterior es:\" + self.usuario) nuevo_usuario = str(input(\"Ingrese el nuevo usuario (ingrese el usuario antiguo si no desea cambiarlo)\")) self.usuario(nuevo_usuario) elif x == 3: print(\"La contrase\u00f1a anterior es:\" + self.password) nuevo_password = str(input(\"Ingrese la nueva contrase\u00f1a (ingrese la contrase\u00f1a antigua si no desea cambiarlo)\")) self.password(nuevo_password) elif x == 4: print(\"La direcci\u00f3n anterior es:\" + self.direccion) nuevo_direccion = str(input(\"Ingrese la nueva direcci\u00f3n (ingrese la direcci\u00f3n antigua si no desea cambiarlo)\")) self.direccion(nuevo_direccion) elif x == 5: print(\"El tel\u00e9fono anterior es:\" + self.telefono) nuevo_telefono = str(input(\"Ingrese el nuevo tel\u00e9fono (ingrese el tel\u00e9fono antiguo si no desea cambiarlo)\")) self.telefono(nuevo_telefono) elif x == 6: break else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\") Persona (Admin) import Persona import abc class PersonaCliente(Persona): def __init__(self, nombre: str, usuario: str, password: str, direccion: str, telefono: str, email: str, tarjeta: str ): super().__init__(nombre, usuario, password, direccion, telefono) self.email = email self.tarjeta = tarjeta @property def email(self): return self._email @email.setter def email(self, new_email): self._email = new_email @property def tarjeta(self): return self._tarjeta @tarjeta.setter def tarjeta(self, new_tarjeta): self._tarjeta = new_tarjeta Persona (Cliente) import Persona import abc class PersonaCliente(Persona): def __init__(self, nombre: str, usuario: str, password: str, direccion: str, telefono: str, email: str, tarjeta: str ): super().__init__(nombre, usuario, password, direccion, telefono) self.email = email self.tarjeta = tarjeta @property def email(self): return self._email @email.setter def email(self, new_email): self._email = new_email @property def tarjeta(self): return self._tarjeta @tarjeta.setter def tarjeta(self, new_tarjeta): self._tarjeta = new_tarjeta Clase Administrador de Personas from InterfazPersona import IntPersona from Persona import Persona from PersonaAdmin import PersonaAdmin from PersonaCliente import PersonaCliente import pandas as pd class AdministradorPersonas: def __init__(self) -> None: pass _df_admin = pd.DataFrame _df_cliente = pd.DataFrame def mostrar_administradores(self): self._df_admin = pd.read_csv(\"development//clases_codigos//archives//Administradores.csv\") self._df_admin.head(len(self._df_admin)) def mostrar_clientes(self): self._df_cliente = pd.read_csv(\"development//clases_codigos//archives//Clientes.csv\") self._df_cliente.head(len(self._df_cliente)) def inicio_sesion_admin(self) -> None: while(True): print(\"Ingrese sus datos de inicio de sesi\u00f3n: (ingrese 3 para cerrar el programa)\") user_attempt = str(input(\"Usuario: \")) pass_attempt = str(input(\"Contrase\u00f1a: \")) if user_attempt == \"3\" : return False for i in range(len(self._df_admin)): if self._df_admin.iloc[i][1] == user_attempt : if self._df_admin.iloc[i][2] == pass_attempt : aux = True break else : aux = False break if aux == True : break if aux == False : print(\"Error a la hora de ingresar el usuario o contrase\u00f1a\") return True def inicio_sesion_cliente(self) -> None: while(True): print(\"Ingrese sus datos de inicio de sesi\u00f3n: (ingrese 3 para cerrar el programa)\") user_attempt = str(input(\"Usuario: \")) pass_attempt = str(input(\"Contrase\u00f1a: \")) if user_attempt == \"3\" : return False for i in range(len(self._df_cliente)): if self._df_cliente.iloc[i][1] == user_attempt : if self._df_cliente.iloc[i][2] == pass_attempt : aux = True break else : aux = False break if aux == True : break if aux == False : print(\"Error a la hora de ingresar el usuario o contrase\u00f1a\") return True def registro_admin(self) -> bool: while(True): print(\"Ingrese el n\u00famero de lo que quiere hacer:\" , \"1) Nuevo administrador\" , \"2) Salir\" , sep = \"\\n\") x = int(input(\":\")) if x == 1: aux = True while aux == True: nuevo_usuario = str(input(\"Ingrese el usuario del administrador: (ingrese 3 para cancelar la operaci\u00f3n)\")) self.usuario(nuevo_usuario) if nuevo_usuario == \"3\" : aux = False return False for i in range(len(self._df_admin)): if self._df_admin.iloc[i][1] == nuevo_usuario : print(\"El usuario ya est\u00e1 en uso, ingrese uno nuevo.\") break if i == len(self._df_admin) - 1: aux = False nuevo_nombre = str(input(\"Ingrese el nombre del administrador: \")) self.nombre(nuevo_nombre) nuevo_password = str(input(\"Ingrese la contrase\u00f1a del administrador: \")) self.password(nuevo_password) nuevo_direccion = str(input(\"Ingrese la direcci\u00f3n del administrador: \")) self.direccion(nuevo_direccion) nuevo_telefono = str(input(\"Ingrese tel\u00e9fono del administrador: \")) self.telefono(nuevo_telefono) self.codigo(len(self._df_admin) + 1) print(\"Los datos ingresados fueron:\") print(self.nombre) print(self.usuario) print(self.password) print(self.direccion) print(self.telefono) print(self.codigo) print(\"Si hay alg\u00fan dato erroneo, favor de ingresar 1, si todos los datos son correctos ingresar 2\") while(True): y = int(input(\":\")) if y == 1: print(\"Regresando al men\u00fa de opciones de usuario\") break elif y == 2: df_aux_1 = pd.DataFrame({\"Nombre\":self.nombre , \"usuario\": self.usuario, \"password\": self.password, \"direcci\u00f3n\": self.direccion, \"tel\u00e9fono\": self.telefono, \"c\u00f3digo\": self.codigo}) df_aux_2 = pd.concat([self._df_admin, df_aux_1]) self._df_admin = df_aux_2 else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\") elif x == 2: break else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\") return True def registro_clientes(self) -> None: while(True): print(\"Ingrese el n\u00famero de lo que quiere hacer:\" , \"1) Nuevo cliente\" , \"2) Salir\" , sep = \"\\n\") x = int(input(\":\")) if x == 1: aux = True while aux == True: nuevo_usuario = str(input(\"Ingrese el usuario del administrador: (ingrese 3 para cancelar la operaci\u00f3n)\")) self.usuario(nuevo_usuario) if nuevo_usuario == \"3\" : aux = False return False for i in range(len(self._df_cliente)): if self._df_cliente.iloc[i][1] == nuevo_usuario : print(\"El usuario ya est\u00e1 en uso, ingrese uno nuevo.\") break if i == len(self._df_cliente) - 1: aux = False nuevo_usuario = str(input(\"Ingrese el usuario del cliente: \")) self.usuario(nuevo_usuario) nuevo_password = str(input(\"Ingrese la contrase\u00f1a del cliente: \")) self.password(nuevo_password) nuevo_direccion = str(input(\"Ingrese la direcci\u00f3n del cliente: \")) self.direccion(nuevo_direccion) nuevo_telefono = str(input(\"Ingrese tel\u00e9fono del cliente: \")) self.telefono(nuevo_telefono) nuevo_email = str(input(\"Ingrese email del cliente: \")) self.email(nuevo_email) nueva_tarjeta = str(input(\"Ingrese el n\u00famero de tarjeta del cliente: \")) self.tarjeta(nueva_tarjeta) print(\"Los datos ingresados fueron:\") print(self.nombre) print(self.usuario) print(self.password) print(self.direccion) print(self.telefono) print(self.email) print(self.tarjeta) print(\"Si hay alg\u00fan dato erroneo, favor de ingresar 1, si todos los datos son correctos ingresar 2\") while(True): y = int(input(\":\")) if y == 1: print(\"Regresando al men\u00fa de opciones de usuario\") break elif y == 2: df_aux_1 = pd.DataFrame({\"Nombre\":self.nombre , \"usuario\": self.usuario, \"password\": self.password, \"direcci\u00f3n\": self.direccion, \"tel\u00e9fono\": self.telefono, \"email\": self.email, \"n\u00fam tarjeta\": self.tarjeta}) df_aux_2 = pd.concat([self._df_cliente, df_aux_1]) self._df_cliente = df_aux_2 else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\") elif x == 2: break else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\")","title":"CODE_Persona"},{"location":"Persona/#clase-persona","text":"from InterfazPersona import IntPersona import abc class Persona(IntPersona): def __init__(self, nombre: str, usuario: str, password: str, direccion: str, telefono: str ): self._nombre = nombre self._usuario = usuario self._password = password self._direccion = direccion self._telefono = telefono @property def nombre(self): return self._nombre @nombre.setter def nombre(self, new_nombre): self._nombre = new_nombre @property def usuario(self): return self._usuario @usuario.setter def usuario(self, new_usuario): self._usuario = new_usuario @property def password(self): return self._password @password.setter def password(self, new_password): self._password = new_password @property def direccion(self): return self._direccion @direccion.setter def direccion(self, new_direccion): self._direccion = new_direccion @property def telefono(self): return self._telefono @telefono.setter def telefono(self, new_telefono): self._telefono = new_telefono def mostrar_datos(self) -> None: print(self.nombre) print(self.usuario) print(self.password) print(self.direccion) print(self.telefono) def cambiar_datos(self) -> None: while(True): print(\"Ingrese el n\u00famero del dato que desea cambiar:\" , \"1) Nombre\" , \"2) Usuario\" , \"3) Contrase\u00f1a\" , \"4) Direcci\u00f3n\" , \"5) Tel\u00e9fono\" , \"6) Salir\" , sep = \"\\n\") x = int(input(\":\")) if x == 1: print(\"El nombre anterior es:\" + self.nombre) nuevo_nombre = str(input(\"Ingrese el nuevo nombre (ingrese el nombre antiguo si no desea cambiarlo)\")) self.nombre(nuevo_nombre) elif x == 2: print(\"El usuario anterior es:\" + self.usuario) nuevo_usuario = str(input(\"Ingrese el nuevo usuario (ingrese el usuario antiguo si no desea cambiarlo)\")) self.usuario(nuevo_usuario) elif x == 3: print(\"La contrase\u00f1a anterior es:\" + self.password) nuevo_password = str(input(\"Ingrese la nueva contrase\u00f1a (ingrese la contrase\u00f1a antigua si no desea cambiarlo)\")) self.password(nuevo_password) elif x == 4: print(\"La direcci\u00f3n anterior es:\" + self.direccion) nuevo_direccion = str(input(\"Ingrese la nueva direcci\u00f3n (ingrese la direcci\u00f3n antigua si no desea cambiarlo)\")) self.direccion(nuevo_direccion) elif x == 5: print(\"El tel\u00e9fono anterior es:\" + self.telefono) nuevo_telefono = str(input(\"Ingrese el nuevo tel\u00e9fono (ingrese el tel\u00e9fono antiguo si no desea cambiarlo)\")) self.telefono(nuevo_telefono) elif x == 6: break else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\")","title":"Clase Persona"},{"location":"Persona/#persona-admin","text":"import Persona import abc class PersonaCliente(Persona): def __init__(self, nombre: str, usuario: str, password: str, direccion: str, telefono: str, email: str, tarjeta: str ): super().__init__(nombre, usuario, password, direccion, telefono) self.email = email self.tarjeta = tarjeta @property def email(self): return self._email @email.setter def email(self, new_email): self._email = new_email @property def tarjeta(self): return self._tarjeta @tarjeta.setter def tarjeta(self, new_tarjeta): self._tarjeta = new_tarjeta","title":"Persona (Admin)"},{"location":"Persona/#persona-cliente","text":"import Persona import abc class PersonaCliente(Persona): def __init__(self, nombre: str, usuario: str, password: str, direccion: str, telefono: str, email: str, tarjeta: str ): super().__init__(nombre, usuario, password, direccion, telefono) self.email = email self.tarjeta = tarjeta @property def email(self): return self._email @email.setter def email(self, new_email): self._email = new_email @property def tarjeta(self): return self._tarjeta @tarjeta.setter def tarjeta(self, new_tarjeta): self._tarjeta = new_tarjeta","title":"Persona (Cliente)"},{"location":"Persona/#clase-administrador-de-personas","text":"from InterfazPersona import IntPersona from Persona import Persona from PersonaAdmin import PersonaAdmin from PersonaCliente import PersonaCliente import pandas as pd class AdministradorPersonas: def __init__(self) -> None: pass _df_admin = pd.DataFrame _df_cliente = pd.DataFrame def mostrar_administradores(self): self._df_admin = pd.read_csv(\"development//clases_codigos//archives//Administradores.csv\") self._df_admin.head(len(self._df_admin)) def mostrar_clientes(self): self._df_cliente = pd.read_csv(\"development//clases_codigos//archives//Clientes.csv\") self._df_cliente.head(len(self._df_cliente)) def inicio_sesion_admin(self) -> None: while(True): print(\"Ingrese sus datos de inicio de sesi\u00f3n: (ingrese 3 para cerrar el programa)\") user_attempt = str(input(\"Usuario: \")) pass_attempt = str(input(\"Contrase\u00f1a: \")) if user_attempt == \"3\" : return False for i in range(len(self._df_admin)): if self._df_admin.iloc[i][1] == user_attempt : if self._df_admin.iloc[i][2] == pass_attempt : aux = True break else : aux = False break if aux == True : break if aux == False : print(\"Error a la hora de ingresar el usuario o contrase\u00f1a\") return True def inicio_sesion_cliente(self) -> None: while(True): print(\"Ingrese sus datos de inicio de sesi\u00f3n: (ingrese 3 para cerrar el programa)\") user_attempt = str(input(\"Usuario: \")) pass_attempt = str(input(\"Contrase\u00f1a: \")) if user_attempt == \"3\" : return False for i in range(len(self._df_cliente)): if self._df_cliente.iloc[i][1] == user_attempt : if self._df_cliente.iloc[i][2] == pass_attempt : aux = True break else : aux = False break if aux == True : break if aux == False : print(\"Error a la hora de ingresar el usuario o contrase\u00f1a\") return True def registro_admin(self) -> bool: while(True): print(\"Ingrese el n\u00famero de lo que quiere hacer:\" , \"1) Nuevo administrador\" , \"2) Salir\" , sep = \"\\n\") x = int(input(\":\")) if x == 1: aux = True while aux == True: nuevo_usuario = str(input(\"Ingrese el usuario del administrador: (ingrese 3 para cancelar la operaci\u00f3n)\")) self.usuario(nuevo_usuario) if nuevo_usuario == \"3\" : aux = False return False for i in range(len(self._df_admin)): if self._df_admin.iloc[i][1] == nuevo_usuario : print(\"El usuario ya est\u00e1 en uso, ingrese uno nuevo.\") break if i == len(self._df_admin) - 1: aux = False nuevo_nombre = str(input(\"Ingrese el nombre del administrador: \")) self.nombre(nuevo_nombre) nuevo_password = str(input(\"Ingrese la contrase\u00f1a del administrador: \")) self.password(nuevo_password) nuevo_direccion = str(input(\"Ingrese la direcci\u00f3n del administrador: \")) self.direccion(nuevo_direccion) nuevo_telefono = str(input(\"Ingrese tel\u00e9fono del administrador: \")) self.telefono(nuevo_telefono) self.codigo(len(self._df_admin) + 1) print(\"Los datos ingresados fueron:\") print(self.nombre) print(self.usuario) print(self.password) print(self.direccion) print(self.telefono) print(self.codigo) print(\"Si hay alg\u00fan dato erroneo, favor de ingresar 1, si todos los datos son correctos ingresar 2\") while(True): y = int(input(\":\")) if y == 1: print(\"Regresando al men\u00fa de opciones de usuario\") break elif y == 2: df_aux_1 = pd.DataFrame({\"Nombre\":self.nombre , \"usuario\": self.usuario, \"password\": self.password, \"direcci\u00f3n\": self.direccion, \"tel\u00e9fono\": self.telefono, \"c\u00f3digo\": self.codigo}) df_aux_2 = pd.concat([self._df_admin, df_aux_1]) self._df_admin = df_aux_2 else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\") elif x == 2: break else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\") return True def registro_clientes(self) -> None: while(True): print(\"Ingrese el n\u00famero de lo que quiere hacer:\" , \"1) Nuevo cliente\" , \"2) Salir\" , sep = \"\\n\") x = int(input(\":\")) if x == 1: aux = True while aux == True: nuevo_usuario = str(input(\"Ingrese el usuario del administrador: (ingrese 3 para cancelar la operaci\u00f3n)\")) self.usuario(nuevo_usuario) if nuevo_usuario == \"3\" : aux = False return False for i in range(len(self._df_cliente)): if self._df_cliente.iloc[i][1] == nuevo_usuario : print(\"El usuario ya est\u00e1 en uso, ingrese uno nuevo.\") break if i == len(self._df_cliente) - 1: aux = False nuevo_usuario = str(input(\"Ingrese el usuario del cliente: \")) self.usuario(nuevo_usuario) nuevo_password = str(input(\"Ingrese la contrase\u00f1a del cliente: \")) self.password(nuevo_password) nuevo_direccion = str(input(\"Ingrese la direcci\u00f3n del cliente: \")) self.direccion(nuevo_direccion) nuevo_telefono = str(input(\"Ingrese tel\u00e9fono del cliente: \")) self.telefono(nuevo_telefono) nuevo_email = str(input(\"Ingrese email del cliente: \")) self.email(nuevo_email) nueva_tarjeta = str(input(\"Ingrese el n\u00famero de tarjeta del cliente: \")) self.tarjeta(nueva_tarjeta) print(\"Los datos ingresados fueron:\") print(self.nombre) print(self.usuario) print(self.password) print(self.direccion) print(self.telefono) print(self.email) print(self.tarjeta) print(\"Si hay alg\u00fan dato erroneo, favor de ingresar 1, si todos los datos son correctos ingresar 2\") while(True): y = int(input(\":\")) if y == 1: print(\"Regresando al men\u00fa de opciones de usuario\") break elif y == 2: df_aux_1 = pd.DataFrame({\"Nombre\":self.nombre , \"usuario\": self.usuario, \"password\": self.password, \"direcci\u00f3n\": self.direccion, \"tel\u00e9fono\": self.telefono, \"email\": self.email, \"n\u00fam tarjeta\": self.tarjeta}) df_aux_2 = pd.concat([self._df_cliente, df_aux_1]) self._df_cliente = df_aux_2 else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\") elif x == 2: break else : print(\"Dato no v\u00e1lido. Regresando a la opci\u00f3n de selecci\u00f3n.\")","title":"Clase Administrador de Personas"}]}